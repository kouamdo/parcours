name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ "develop-extend-test-update" ]
  pull_request:
    branches: [ "develop-extend-test-update" ]

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.19.x]  # Specify the Node.js version(s) to test against

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate versioning

      # Step 2: Set up Node.js environment
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package.json

      # Step: Set up JDK 17 for Maven builds
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: '17'
          
      # Step 3: Install Angular CLI globally
      - name: Install Angular CLI
        run: npm install -g @angular/cli

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      # Step 5: Install Sonar Scanner and run analysis
      # - name: Run SonarQube Analysis
      #   run: |
      #     npm install sonar-scanner --save-dev --legacy-peer-deps
      #     npm run sonar

      - name: Authenticate to GitHub Packages
        run: |
          npm set "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}"
          npm login --scope=@kouamdo --auth-type=legacy --registry=https://npm.pkg.github.com -username=kouamdo --password=${{ secrets.NPM_TOKEN }}
      
      # Step 6: Build the Angular application for production
      - name: Build Application
        run: ng build --configuration production

      - name: Publich package
        run: npm publish dist/clinique --access public

  dockerBuildAndPush:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs after the build job

    steps:
      # Step 7: Checkout code again (if needed)
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 8: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 9: Build and push Docker image to the registry (if needed)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .  # Use the current directory as the build context
          file: Dockerfile  # Specify the Dockerfile to use
          tags: parcoursfront:latest  # Tag for the built image
          load: true  # Load the image into the Docker daemon (for local use)
          cache-from: type=gha  # Use GitHub Actions cache as a cache source
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions for future builds
          push: false  # Set to true if you want to push to a remote registry
